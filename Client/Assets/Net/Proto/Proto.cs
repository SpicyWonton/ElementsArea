// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcLibrary {

  /// <summary>Holder for reflection information generated from proto.proto</summary>
  public static partial class ProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwcm90by5wcm90bxILR3JwY0xpYnJhcnkiNQoGU2lnblVwEgsKA1VJRBgB",
            "IAEoCRIQCghQYXNzd29yZBgCIAEoCRIMCgROYW1lGAMgASgJIicKBlNpZ25J",
            "bhILCgNVSUQYASABKAkSEAoIUGFzc3dvcmQYAiABKAkiYAoEVXNlchILCgNV",
            "SUQYASABKAkSEAoIUGFzc3dvcmQYAiABKAkSDAoETmFtZRgDIAEoCRIMCgRS",
            "YW5rGAQgASgFEgsKA0VYUBgFIAEoBRIQCghIZWFkSWNvbhgGIAEoBSI9CghT",
            "aWduU3VjYxIMCgRGbGFnGAEgASgIEiMKCFVzZXJJbmZvGAIgASgLMhEuR3Jw",
            "Y0xpYnJhcnkuVXNlciJ0CgZQbGF5ZXISIAoDUG9zGAEgASgLMhMuR3JwY0xp",
            "YnJhcnkuVmVjdG9yEiAKA1JvdBgCIAEoCzITLkdycGNMaWJyYXJ5LlZlY3Rv",
            "chINCgVTcGVlZBgDIAEoAhILCgNQSUQYBCABKAUSCgoCSFAYBSABKAIiKQoG",
            "VmVjdG9yEgkKAVgYASABKAISCQoBWRgCIAEoAhIJCgFaGAMgASgCIiYKCkhh",
            "dmVXZWFwb24SCwoDUElEGAEgASgFEgsKA0NJRBgCIAEoBSJACglQbGF5ZXJB",
            "dGsSCwoDUElEGAEgASgFEiYKCUF0dGFja0RpchgCIAEoCzITLkdycGNMaWJy",
            "YXJ5LlZlY3RvciITCgRSb29tEgsKA1JpZBgBIAEoBSI3CghSb29tSW5mbxIK",
            "CgJJZBgBIAEoBRIMCgROdW1zGAIgASgFEhEKCU93bmVyTmFtZRgDIAEoCSIz",
            "CghSb29tTGlzdBInCghyb29tbGlzdBgBIAMoCzIVLkdycGNMaWJyYXJ5LlJv",
            "b21JbmZvImkKClJvb21QbGF5ZXISCwoDVUlEGAEgASgJEgwKBE5hbWUYAiAB",
            "KAkSDAoEUmFuaxgDIAEoBRIPCgdJc1JlYWR5GAQgASgIEg8KB0lzT3duZXIY",
            "BSABKAgSEAoISGVhZEljb24YBiABKAUiRgoJRW50ZXJSb29tEgwKBGZsYWcY",
            "ASABKAgSKwoKUGxheWVyTGlzdBgCIAMoCzIXLkdycGNMaWJyYXJ5LlJvb21Q",
            "bGF5ZXIiEwoEU3luYxILCgNUYWcYASABKAgiJQoHSXNSZWFkeRILCgNVSUQY",
            "ASABKAkSDQoFUmVhZHkYAiABKAgiRwoJRW50ZXJHYW1lEisKCnBsYXllckxp",
            "c3QYASADKAsyFy5HcnBjTGlicmFyeS5HYW1lUGxheWVyEg0KBVNlZWQxGAIg",
            "ASgFIiYKCkdhbWVQbGF5ZXISCwoDVUlEGAEgASgJEgsKA1BJRBgCIAEoBSIc",
            "CghHYW1lVGltZRIQCghUaW1lTGVmdBgBIAEoBSIpCgtQbGF5ZXJQb2ludBIL",
            "CgNVSUQYASABKAkSDQoFUG9pbnQYAiABKAUiOAoNQnJvYWRDYXN0TW92ZRIn",
            "CgpQbGF5ZXJJbmZvGAEgAygLMhMuR3JwY0xpYnJhcnkuUGxheWVyIlcKBEN1",
            "YmUSCwoDQ0lEGAEgASgFEiAKA1BvcxgCIAEoCzITLkdycGNMaWJyYXJ5LlZl",
            "Y3RvchIgCgNSb3QYAyABKAsyEy5HcnBjTGlicmFyeS5WZWN0b3IiFAoFQ3Vi",
            "ZXMSCwoDQ0lEGAEgAygFIlgKCEN1YmVDb2xsEgsKA0NJRBgBIAEoBRIkCgdD",
            "dWJlUG9zGAIgASgLMhMuR3JwY0xpYnJhcnkuVmVjdG9yEgsKA1BJRBgDIAEo",
            "BRIMCgRGbGFnGAQgASgIInMKCkdhbWVTZXR0bGUSCwoDVUlEGAEgASgJEgwK",
            "BE5hbWUYAiABKAkSDQoFU2NvcmUYAyABKAUSCwoDRVhQGAQgASgFEgwKBFJh",
            "bmsYBSABKAUSEAoISGVhZEljb24YBiABKAUSDgoGQWRkRVhQGAcgASgFIjkK",
            "DUdhbWVTZXR0bGVBcnISKAoHQWxsRGF0YRgBIAMoCzIXLkdycGNMaWJyYXJ5",
            "LkdhbWVTZXR0bGUiJQoJVGFsa1ZvaWNlEgsKA1BJRBgBIAEoBRILCgNWSUQY",
            "AiABKAUquQMKBU1TR0lEEgoKBlNJR05VUBAAEgoKBlNJR05JThABEgwKCFJP",
            "T01JTkZPEAISDgoKQ1JFQVRFUk9PTRADEg0KCUVOVEVSUk9PTRAEEg0KCUxF",
            "QVZFUk9PTRAFEgsKB0lTUkVBRFkQBhINCglTVEFSVEdBTUUQFBIKCgZTRVRQ",
            "SUQQFRILCgdMT0FETUFQEBYSCwoHR0FNRUZJThAXEgsKB1NZTkNQSFYQGBIP",
            "CgtIV0FWRVdFQVBPThAZEg0KCVBMQUNFQ1VCRRAaEgcKA0FUSxAbEg0KCUNP",
            "TExJU0lPThAcEgwKCEFERFNDT1JFEB0SCQoFVk9JQ0UQHhIRCg1CUk9ST09N",
            "Q0hBTkdFEGgSDgoKQlJPSVNSRUFEWRBqEhAKDEJST0VOVEVSR0FNRRB6Eg8K",
            "C0JST0dBTUVUSU1FEHsSDgoKQlJPU1lOQ1BIVhB8EhIKDkJST0hXQVZFV0VB",
            "UE9OEH0SEgoOQlJPUExBQ0VXRUFQT04QfhIKCgZCUk9BVEsQfxIRCgxCUk9D",
            "T0xMSVNJT04QgAESEAoLQlJPQUREU0NPUkUQgQESDQoIQlJPVk9JQ0UQggFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GrpcLibrary.MSGID), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.SignUp), global::GrpcLibrary.SignUp.Parser, new[]{ "UID", "Password", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.SignIn), global::GrpcLibrary.SignIn.Parser, new[]{ "UID", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.User), global::GrpcLibrary.User.Parser, new[]{ "UID", "Password", "Name", "Rank", "EXP", "HeadIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.SignSucc), global::GrpcLibrary.SignSucc.Parser, new[]{ "Flag", "UserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Player), global::GrpcLibrary.Player.Parser, new[]{ "Pos", "Rot", "Speed", "PID", "HP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Vector), global::GrpcLibrary.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.HaveWeapon), global::GrpcLibrary.HaveWeapon.Parser, new[]{ "PID", "CID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.PlayerAtk), global::GrpcLibrary.PlayerAtk.Parser, new[]{ "PID", "AttackDir" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Room), global::GrpcLibrary.Room.Parser, new[]{ "Rid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.RoomInfo), global::GrpcLibrary.RoomInfo.Parser, new[]{ "Id", "Nums", "OwnerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.RoomList), global::GrpcLibrary.RoomList.Parser, new[]{ "Roomlist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.RoomPlayer), global::GrpcLibrary.RoomPlayer.Parser, new[]{ "UID", "Name", "Rank", "IsReady", "IsOwner", "HeadIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.EnterRoom), global::GrpcLibrary.EnterRoom.Parser, new[]{ "Flag", "PlayerList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Sync), global::GrpcLibrary.Sync.Parser, new[]{ "Tag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.IsReady), global::GrpcLibrary.IsReady.Parser, new[]{ "UID", "Ready" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.EnterGame), global::GrpcLibrary.EnterGame.Parser, new[]{ "PlayerList", "Seed1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.GamePlayer), global::GrpcLibrary.GamePlayer.Parser, new[]{ "UID", "PID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.GameTime), global::GrpcLibrary.GameTime.Parser, new[]{ "TimeLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.PlayerPoint), global::GrpcLibrary.PlayerPoint.Parser, new[]{ "UID", "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.BroadCastMove), global::GrpcLibrary.BroadCastMove.Parser, new[]{ "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Cube), global::GrpcLibrary.Cube.Parser, new[]{ "CID", "Pos", "Rot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.Cubes), global::GrpcLibrary.Cubes.Parser, new[]{ "CID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.CubeColl), global::GrpcLibrary.CubeColl.Parser, new[]{ "CID", "CubePos", "PID", "Flag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.GameSettle), global::GrpcLibrary.GameSettle.Parser, new[]{ "UID", "Name", "Score", "EXP", "Rank", "HeadIcon", "AddEXP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.GameSettleArr), global::GrpcLibrary.GameSettleArr.Parser, new[]{ "AllData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcLibrary.TalkVoice), global::GrpcLibrary.TalkVoice.Parser, new[]{ "PID", "VID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSGID {
    [pbr::OriginalName("SIGNUP")] Signup = 0,
    [pbr::OriginalName("SIGNIN")] Signin = 1,
    [pbr::OriginalName("ROOMINFO")] Roominfo = 2,
    [pbr::OriginalName("CREATEROOM")] Createroom = 3,
    [pbr::OriginalName("ENTERROOM")] Enterroom = 4,
    [pbr::OriginalName("LEAVEROOM")] Leaveroom = 5,
    [pbr::OriginalName("ISREADY")] Isready = 6,
    [pbr::OriginalName("STARTGAME")] Startgame = 20,
    [pbr::OriginalName("SETPID")] Setpid = 21,
    [pbr::OriginalName("LOADMAP")] Loadmap = 22,
    [pbr::OriginalName("GAMEFIN")] Gamefin = 23,
    [pbr::OriginalName("SYNCPHV")] Syncphv = 24,
    [pbr::OriginalName("HWAVEWEAPON")] Hwaveweapon = 25,
    [pbr::OriginalName("PLACECUBE")] Placecube = 26,
    [pbr::OriginalName("ATK")] Atk = 27,
    [pbr::OriginalName("COLLISION")] Collision = 28,
    [pbr::OriginalName("ADDSCORE")] Addscore = 29,
    [pbr::OriginalName("VOICE")] Voice = 30,
    [pbr::OriginalName("BROROOMCHANGE")] Broroomchange = 104,
    [pbr::OriginalName("BROISREADY")] Broisready = 106,
    [pbr::OriginalName("BROENTERGAME")] Broentergame = 122,
    [pbr::OriginalName("BROGAMETIME")] Brogametime = 123,
    [pbr::OriginalName("BROSYNCPHV")] Brosyncphv = 124,
    [pbr::OriginalName("BROHWAVEWEAPON")] Brohwaveweapon = 125,
    [pbr::OriginalName("BROPLACEWEAPON")] Broplaceweapon = 126,
    [pbr::OriginalName("BROATK")] Broatk = 127,
    [pbr::OriginalName("BROCOLLISION")] Brocollision = 128,
    [pbr::OriginalName("BROADDSCORE")] Broaddscore = 129,
    [pbr::OriginalName("BROVOICE")] Brovoice = 130,
  }

  #endregion

  #region Messages
  /// <summary>
  ///注册账户
  /// </summary>
  public sealed partial class SignUp : pb::IMessage<SignUp> {
    private static readonly pb::MessageParser<SignUp> _parser = new pb::MessageParser<SignUp>(() => new SignUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignUp(SignUp other) : this() {
      uID_ = other.uID_;
      password_ = other.password_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignUp Clone() {
      return new SignUp(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Password != other.Password) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignUp other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录账户
  /// </summary>
  public sealed partial class SignIn : pb::IMessage<SignIn> {
    private static readonly pb::MessageParser<SignIn> _parser = new pb::MessageParser<SignIn>(() => new SignIn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignIn(SignIn other) : this() {
      uID_ = other.uID_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignIn Clone() {
      return new SignIn(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignIn other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户信息
  /// </summary>
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      uID_ = other.uID_;
      password_ = other.password_;
      name_ = other.name_;
      rank_ = other.rank_;
      eXP_ = other.eXP_;
      headIcon_ = other.headIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "EXP" field.</summary>
    public const int EXPFieldNumber = 5;
    private int eXP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EXP {
      get { return eXP_; }
      set {
        eXP_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 6;
    private int headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Password != other.Password) return false;
      if (Name != other.Name) return false;
      if (Rank != other.Rank) return false;
      if (EXP != other.EXP) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (EXP != 0) hash ^= EXP.GetHashCode();
      if (HeadIcon != 0) hash ^= HeadIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
      if (EXP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EXP);
      }
      if (HeadIcon != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (EXP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EXP);
      }
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.EXP != 0) {
        EXP = other.EXP;
      }
      if (other.HeadIcon != 0) {
        HeadIcon = other.HeadIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
          case 40: {
            EXP = input.ReadInt32();
            break;
          }
          case 48: {
            HeadIcon = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录/注册是否成功
  /// </summary>
  public sealed partial class SignSucc : pb::IMessage<SignSucc> {
    private static readonly pb::MessageParser<SignSucc> _parser = new pb::MessageParser<SignSucc>(() => new SignSucc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignSucc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignSucc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignSucc(SignSucc other) : this() {
      flag_ = other.flag_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignSucc Clone() {
      return new SignSucc(this);
    }

    /// <summary>Field number for the "Flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "UserInfo" field.</summary>
    public const int UserInfoFieldNumber = 2;
    private global::GrpcLibrary.User userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.User UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignSucc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignSucc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Flag != false) hash ^= Flag.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != false) {
        size += 1 + 1;
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignSucc other) {
      if (other == null) {
        return;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::GrpcLibrary.User();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              UserInfo = new global::GrpcLibrary.User();
            }
            input.ReadMessage(UserInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家位置和移动速度
  /// </summary>
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      rot_ = other.rot_ != null ? other.rot_.Clone() : null;
      speed_ = other.speed_;
      pID_ = other.pID_;
      hP_ = other.hP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::GrpcLibrary.Vector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "Rot" field.</summary>
    public const int RotFieldNumber = 2;
    private global::GrpcLibrary.Vector rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 4;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 5;
    private float hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (PID != other.PID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HP, other.HP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (PID != 0) hash ^= PID.GetHashCode();
      if (HP != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HP);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rot);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (PID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PID);
      }
      if (HP != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (HP != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::GrpcLibrary.Vector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          Rot = new global::GrpcLibrary.Vector();
        }
        Rot.MergeFrom(other.Rot);
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.HP != 0F) {
        HP = other.HP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (rot_ == null) {
              Rot = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(Rot);
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 32: {
            PID = input.ReadInt32();
            break;
          }
          case 45: {
            HP = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///向量
  /// </summary>
  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家举起方块
  /// </summary>
  public sealed partial class HaveWeapon : pb::IMessage<HaveWeapon> {
    private static readonly pb::MessageParser<HaveWeapon> _parser = new pb::MessageParser<HaveWeapon>(() => new HaveWeapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HaveWeapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaveWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaveWeapon(HaveWeapon other) : this() {
      pID_ = other.pID_;
      cID_ = other.cID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HaveWeapon Clone() {
      return new HaveWeapon(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 2;
    private int cID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HaveWeapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HaveWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (CID != other.CID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID != 0) hash ^= PID.GetHashCode();
      if (CID != 0) hash ^= CID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (CID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HaveWeapon other) {
      if (other == null) {
        return;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            CID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家广播的数据
  /// </summary>
  public sealed partial class PlayerAtk : pb::IMessage<PlayerAtk> {
    private static readonly pb::MessageParser<PlayerAtk> _parser = new pb::MessageParser<PlayerAtk>(() => new PlayerAtk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAtk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAtk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAtk(PlayerAtk other) : this() {
      pID_ = other.pID_;
      attackDir_ = other.attackDir_ != null ? other.attackDir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAtk Clone() {
      return new PlayerAtk(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "AttackDir" field.</summary>
    public const int AttackDirFieldNumber = 2;
    private global::GrpcLibrary.Vector attackDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector AttackDir {
      get { return attackDir_; }
      set {
        attackDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAtk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAtk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (!object.Equals(AttackDir, other.AttackDir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID != 0) hash ^= PID.GetHashCode();
      if (attackDir_ != null) hash ^= AttackDir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (attackDir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AttackDir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (attackDir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackDir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAtk other) {
      if (other == null) {
        return;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.attackDir_ != null) {
        if (attackDir_ == null) {
          AttackDir = new global::GrpcLibrary.Vector();
        }
        AttackDir.MergeFrom(other.AttackDir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 18: {
            if (attackDir_ == null) {
              AttackDir = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(AttackDir);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建/进入/离开房间
  /// </summary>
  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      rid_ = other.rid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "Rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间信息
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      id_ = other.id_;
      nums_ = other.nums_;
      ownerName_ = other.ownerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Nums" field.</summary>
    public const int NumsFieldNumber = 2;
    private int nums_;
    /// <summary>
    ///房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nums {
      get { return nums_; }
      set {
        nums_ = value;
      }
    }

    /// <summary>Field number for the "OwnerName" field.</summary>
    public const int OwnerNameFieldNumber = 3;
    private string ownerName_ = "";
    /// <summary>
    ///房主Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Nums != other.Nums) return false;
      if (OwnerName != other.OwnerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Nums != 0) hash ^= Nums.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Nums != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nums);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Nums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nums);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Nums != 0) {
        Nums = other.Nums;
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Nums = input.ReadInt32();
            break;
          }
          case 26: {
            OwnerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间列表信息
  /// </summary>
  public sealed partial class RoomList : pb::IMessage<RoomList> {
    private static readonly pb::MessageParser<RoomList> _parser = new pb::MessageParser<RoomList>(() => new RoomList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList(RoomList other) : this() {
      roomlist_ = other.roomlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList Clone() {
      return new RoomList(this);
    }

    /// <summary>Field number for the "roomlist" field.</summary>
    public const int RoomlistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GrpcLibrary.RoomInfo> _repeated_roomlist_codec
        = pb::FieldCodec.ForMessage(10, global::GrpcLibrary.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::GrpcLibrary.RoomInfo> roomlist_ = new pbc::RepeatedField<global::GrpcLibrary.RoomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcLibrary.RoomInfo> Roomlist {
      get { return roomlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomlist_.Equals(other.roomlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomlist_.WriteTo(output, _repeated_roomlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomlist_.CalculateSize(_repeated_roomlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomList other) {
      if (other == null) {
        return;
      }
      roomlist_.Add(other.roomlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roomlist_.AddEntriesFrom(input, _repeated_roomlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间玩家信息
  /// </summary>
  public sealed partial class RoomPlayer : pb::IMessage<RoomPlayer> {
    private static readonly pb::MessageParser<RoomPlayer> _parser = new pb::MessageParser<RoomPlayer>(() => new RoomPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayer(RoomPlayer other) : this() {
      uID_ = other.uID_;
      name_ = other.name_;
      rank_ = other.rank_;
      isReady_ = other.isReady_;
      isOwner_ = other.isOwner_;
      headIcon_ = other.headIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPlayer Clone() {
      return new RoomPlayer(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "IsReady" field.</summary>
    public const int IsReadyFieldNumber = 4;
    private bool isReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    /// <summary>Field number for the "IsOwner" field.</summary>
    public const int IsOwnerFieldNumber = 5;
    private bool isOwner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwner {
      get { return isOwner_; }
      set {
        isOwner_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 6;
    private int headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Name != other.Name) return false;
      if (Rank != other.Rank) return false;
      if (IsReady != other.IsReady) return false;
      if (IsOwner != other.IsOwner) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      if (IsOwner != false) hash ^= IsOwner.GetHashCode();
      if (HeadIcon != 0) hash ^= HeadIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (IsReady != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReady);
      }
      if (IsOwner != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOwner);
      }
      if (HeadIcon != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (IsOwner != false) {
        size += 1 + 1;
      }
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPlayer other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
      if (other.IsOwner != false) {
        IsOwner = other.IsOwner;
      }
      if (other.HeadIcon != 0) {
        HeadIcon = other.HeadIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            IsReady = input.ReadBool();
            break;
          }
          case 40: {
            IsOwner = input.ReadBool();
            break;
          }
          case 48: {
            HeadIcon = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoom : pb::IMessage<EnterRoom> {
    private static readonly pb::MessageParser<EnterRoom> _parser = new pb::MessageParser<EnterRoom>(() => new EnterRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom(EnterRoom other) : this() {
      flag_ = other.flag_;
      playerList_ = other.playerList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoom Clone() {
      return new EnterRoom(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "PlayerList" field.</summary>
    public const int PlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GrpcLibrary.RoomPlayer> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(18, global::GrpcLibrary.RoomPlayer.Parser);
    private readonly pbc::RepeatedField<global::GrpcLibrary.RoomPlayer> playerList_ = new pbc::RepeatedField<global::GrpcLibrary.RoomPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcLibrary.RoomPlayer> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Flag != false) hash ^= Flag.GetHashCode();
      hash ^= playerList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != false) {
        size += 1 + 1;
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      playerList_.Add(other.playerList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
          case 18: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发送各种是否成功或者标识指令
  /// </summary>
  public sealed partial class Sync : pb::IMessage<Sync> {
    private static readonly pb::MessageParser<Sync> _parser = new pb::MessageParser<Sync>(() => new Sync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync(Sync other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync Clone() {
      return new Sync(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 1;
    private bool tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != false) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sync other) {
      if (other == null) {
        return;
      }
      if (other.Tag != false) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IsReady : pb::IMessage<IsReady> {
    private static readonly pb::MessageParser<IsReady> _parser = new pb::MessageParser<IsReady>(() => new IsReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsReady(IsReady other) : this() {
      uID_ = other.uID_;
      ready_ = other.ready_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsReady Clone() {
      return new IsReady(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ready" field.</summary>
    public const int ReadyFieldNumber = 2;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Ready != other.Ready) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Ready != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ready);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsReady other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 16: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入游戏
  /// </summary>
  public sealed partial class EnterGame : pb::IMessage<EnterGame> {
    private static readonly pb::MessageParser<EnterGame> _parser = new pb::MessageParser<EnterGame>(() => new EnterGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame(EnterGame other) : this() {
      playerList_ = other.playerList_.Clone();
      seed1_ = other.seed1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame Clone() {
      return new EnterGame(this);
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GrpcLibrary.GamePlayer> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::GrpcLibrary.GamePlayer.Parser);
    private readonly pbc::RepeatedField<global::GrpcLibrary.GamePlayer> playerList_ = new pbc::RepeatedField<global::GrpcLibrary.GamePlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcLibrary.GamePlayer> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "Seed1" field.</summary>
    public const int Seed1FieldNumber = 2;
    private int seed1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seed1 {
      get { return seed1_; }
      set {
        seed1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerList_.Equals(other.playerList_)) return false;
      if (Seed1 != other.Seed1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerList_.GetHashCode();
      if (Seed1 != 0) hash ^= Seed1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (Seed1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Seed1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (Seed1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterGame other) {
      if (other == null) {
        return;
      }
      playerList_.Add(other.playerList_);
      if (other.Seed1 != 0) {
        Seed1 = other.Seed1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 16: {
            Seed1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GamePlayer : pb::IMessage<GamePlayer> {
    private static readonly pb::MessageParser<GamePlayer> _parser = new pb::MessageParser<GamePlayer>(() => new GamePlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayer(GamePlayer other) : this() {
      uID_ = other.uID_;
      pID_ = other.pID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayer Clone() {
      return new GamePlayer(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 2;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (PID != other.PID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (PID != 0) hash ^= PID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (PID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePlayer other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 16: {
            PID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameTime : pb::IMessage<GameTime> {
    private static readonly pb::MessageParser<GameTime> _parser = new pb::MessageParser<GameTime>(() => new GameTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTime(GameTime other) : this() {
      timeLeft_ = other.timeLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTime Clone() {
      return new GameTime(this);
    }

    /// <summary>Field number for the "TimeLeft" field.</summary>
    public const int TimeLeftFieldNumber = 1;
    private int timeLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLeft {
      get { return timeLeft_; }
      set {
        timeLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLeft != other.TimeLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeLeft != 0) hash ^= TimeLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimeLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTime other) {
      if (other == null) {
        return;
      }
      if (other.TimeLeft != 0) {
        TimeLeft = other.TimeLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeLeft = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新玩家分数
  /// </summary>
  public sealed partial class PlayerPoint : pb::IMessage<PlayerPoint> {
    private static readonly pb::MessageParser<PlayerPoint> _parser = new pb::MessageParser<PlayerPoint>(() => new PlayerPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint(PlayerPoint other) : this() {
      uID_ = other.uID_;
      point_ = other.point_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPoint Clone() {
      return new PlayerPoint(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Point != other.Point) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPoint other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///测试移动
  /// </summary>
  public sealed partial class BroadCastMove : pb::IMessage<BroadCastMove> {
    private static readonly pb::MessageParser<BroadCastMove> _parser = new pb::MessageParser<BroadCastMove>(() => new BroadCastMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadCastMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMove(BroadCastMove other) : this() {
      playerInfo_ = other.playerInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMove Clone() {
      return new BroadCastMove(this);
    }

    /// <summary>Field number for the "PlayerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GrpcLibrary.Player> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(10, global::GrpcLibrary.Player.Parser);
    private readonly pbc::RepeatedField<global::GrpcLibrary.Player> playerInfo_ = new pbc::RepeatedField<global::GrpcLibrary.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcLibrary.Player> PlayerInfo {
      get { return playerInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadCastMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadCastMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadCastMove other) {
      if (other == null) {
        return;
      }
      playerInfo_.Add(other.playerInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///方块
  /// </summary>
  public sealed partial class Cube : pb::IMessage<Cube> {
    private static readonly pb::MessageParser<Cube> _parser = new pb::MessageParser<Cube>(() => new Cube());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cube> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cube() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cube(Cube other) : this() {
      cID_ = other.cID_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      rot_ = other.rot_ != null ? other.rot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cube Clone() {
      return new Cube(this);
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 1;
    private int cID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::GrpcLibrary.Vector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "Rot" field.</summary>
    public const int RotFieldNumber = 3;
    private global::GrpcLibrary.Vector rot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cube);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cube other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CID != other.CID) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rot, other.Rot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CID != 0) hash ^= CID.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rot_ != null) hash ^= Rot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CID);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (rot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cube other) {
      if (other == null) {
        return;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::GrpcLibrary.Vector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rot_ != null) {
        if (rot_ == null) {
          Rot = new global::GrpcLibrary.Vector();
        }
        Rot.MergeFrom(other.Rot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CID = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 26: {
            if (rot_ == null) {
              Rot = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(Rot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cubes : pb::IMessage<Cubes> {
    private static readonly pb::MessageParser<Cubes> _parser = new pb::MessageParser<Cubes>(() => new Cubes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cubes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cubes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cubes(Cubes other) : this() {
      cID_ = other.cID_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cubes Clone() {
      return new Cubes(this);
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cID_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cID_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CID {
      get { return cID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cubes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cubes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cID_.Equals(other.cID_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cID_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cID_.WriteTo(output, _repeated_cID_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cID_.CalculateSize(_repeated_cID_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cubes other) {
      if (other == null) {
        return;
      }
      cID_.Add(other.cID_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cID_.AddEntriesFrom(input, _repeated_cID_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///方块碰撞时
  /// </summary>
  public sealed partial class CubeColl : pb::IMessage<CubeColl> {
    private static readonly pb::MessageParser<CubeColl> _parser = new pb::MessageParser<CubeColl>(() => new CubeColl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CubeColl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeColl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeColl(CubeColl other) : this() {
      cID_ = other.cID_;
      cubePos_ = other.cubePos_ != null ? other.cubePos_.Clone() : null;
      pID_ = other.pID_;
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeColl Clone() {
      return new CubeColl(this);
    }

    /// <summary>Field number for the "CID" field.</summary>
    public const int CIDFieldNumber = 1;
    private int cID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CID {
      get { return cID_; }
      set {
        cID_ = value;
      }
    }

    /// <summary>Field number for the "CubePos" field.</summary>
    public const int CubePosFieldNumber = 2;
    private global::GrpcLibrary.Vector cubePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcLibrary.Vector CubePos {
      get { return cubePos_; }
      set {
        cubePos_ = value;
      }
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 3;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "Flag" field.</summary>
    public const int FlagFieldNumber = 4;
    private bool flag_;
    /// <summary>
    ///true表示击中玩家，false表示击中地面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CubeColl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CubeColl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CID != other.CID) return false;
      if (!object.Equals(CubePos, other.CubePos)) return false;
      if (PID != other.PID) return false;
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CID != 0) hash ^= CID.GetHashCode();
      if (cubePos_ != null) hash ^= CubePos.GetHashCode();
      if (PID != 0) hash ^= PID.GetHashCode();
      if (Flag != false) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CID);
      }
      if (cubePos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CubePos);
      }
      if (PID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PID);
      }
      if (Flag != false) {
        output.WriteRawTag(32);
        output.WriteBool(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CID);
      }
      if (cubePos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CubePos);
      }
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CubeColl other) {
      if (other == null) {
        return;
      }
      if (other.CID != 0) {
        CID = other.CID;
      }
      if (other.cubePos_ != null) {
        if (cubePos_ == null) {
          CubePos = new global::GrpcLibrary.Vector();
        }
        CubePos.MergeFrom(other.CubePos);
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CID = input.ReadInt32();
            break;
          }
          case 18: {
            if (cubePos_ == null) {
              CubePos = new global::GrpcLibrary.Vector();
            }
            input.ReadMessage(CubePos);
            break;
          }
          case 24: {
            PID = input.ReadInt32();
            break;
          }
          case 32: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏结算得分
  /// </summary>
  public sealed partial class GameSettle : pb::IMessage<GameSettle> {
    private static readonly pb::MessageParser<GameSettle> _parser = new pb::MessageParser<GameSettle>(() => new GameSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettle(GameSettle other) : this() {
      uID_ = other.uID_;
      name_ = other.name_;
      score_ = other.score_;
      eXP_ = other.eXP_;
      rank_ = other.rank_;
      headIcon_ = other.headIcon_;
      addEXP_ = other.addEXP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettle Clone() {
      return new GameSettle(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "EXP" field.</summary>
    public const int EXPFieldNumber = 4;
    private int eXP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EXP {
      get { return eXP_; }
      set {
        eXP_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 5;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 6;
    private int headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    /// <summary>Field number for the "AddEXP" field.</summary>
    public const int AddEXPFieldNumber = 7;
    private int addEXP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddEXP {
      get { return addEXP_; }
      set {
        addEXP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if (Name != other.Name) return false;
      if (Score != other.Score) return false;
      if (EXP != other.EXP) return false;
      if (Rank != other.Rank) return false;
      if (HeadIcon != other.HeadIcon) return false;
      if (AddEXP != other.AddEXP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (EXP != 0) hash ^= EXP.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (HeadIcon != 0) hash ^= HeadIcon.GetHashCode();
      if (AddEXP != 0) hash ^= AddEXP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (EXP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EXP);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (HeadIcon != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeadIcon);
      }
      if (AddEXP != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AddEXP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (EXP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EXP);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadIcon);
      }
      if (AddEXP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddEXP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSettle other) {
      if (other == null) {
        return;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.EXP != 0) {
        EXP = other.EXP;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.HeadIcon != 0) {
        HeadIcon = other.HeadIcon;
      }
      if (other.AddEXP != 0) {
        AddEXP = other.AddEXP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UID = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            EXP = input.ReadInt32();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            HeadIcon = input.ReadInt32();
            break;
          }
          case 56: {
            AddEXP = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏结算得分数组
  /// </summary>
  public sealed partial class GameSettleArr : pb::IMessage<GameSettleArr> {
    private static readonly pb::MessageParser<GameSettleArr> _parser = new pb::MessageParser<GameSettleArr>(() => new GameSettleArr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSettleArr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettleArr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettleArr(GameSettleArr other) : this() {
      allData_ = other.allData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSettleArr Clone() {
      return new GameSettleArr(this);
    }

    /// <summary>Field number for the "AllData" field.</summary>
    public const int AllDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GrpcLibrary.GameSettle> _repeated_allData_codec
        = pb::FieldCodec.ForMessage(10, global::GrpcLibrary.GameSettle.Parser);
    private readonly pbc::RepeatedField<global::GrpcLibrary.GameSettle> allData_ = new pbc::RepeatedField<global::GrpcLibrary.GameSettle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcLibrary.GameSettle> AllData {
      get { return allData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSettleArr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSettleArr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!allData_.Equals(other.allData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= allData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allData_.WriteTo(output, _repeated_allData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allData_.CalculateSize(_repeated_allData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSettleArr other) {
      if (other == null) {
        return;
      }
      allData_.Add(other.allData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            allData_.AddEntriesFrom(input, _repeated_allData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家说话
  /// </summary>
  public sealed partial class TalkVoice : pb::IMessage<TalkVoice> {
    private static readonly pb::MessageParser<TalkVoice> _parser = new pb::MessageParser<TalkVoice>(() => new TalkVoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalkVoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcLibrary.ProtoReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkVoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkVoice(TalkVoice other) : this() {
      pID_ = other.pID_;
      vID_ = other.vID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkVoice Clone() {
      return new TalkVoice(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private int pID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "VID" field.</summary>
    public const int VIDFieldNumber = 2;
    private int vID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VID {
      get { return vID_; }
      set {
        vID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TalkVoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TalkVoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (VID != other.VID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID != 0) hash ^= PID.GetHashCode();
      if (VID != 0) hash ^= VID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (VID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (VID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TalkVoice other) {
      if (other == null) {
        return;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.VID != 0) {
        VID = other.VID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            VID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
